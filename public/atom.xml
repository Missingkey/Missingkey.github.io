<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-02-22T02:33:01.316Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>数据库系统概念作业答案</title>
    <link href="http://example.com/2022/01/11/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BD%9C%E4%B8%9A%E7%AD%94%E6%A1%88/"/>
    <id>http://example.com/2022/01/11/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BD%9C%E4%B8%9A%E7%AD%94%E6%A1%88/</id>
    <published>2022-01-11T14:35:32.000Z</published>
    <updated>2022-02-22T02:33:01.316Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第一次作业"><a href="#第一次作业" class="headerlink" title="第一次作业"></a>第一次作业</h1><h4 id="2-9"><a href="#2-9" class="headerlink" title="2.9"></a>2.9</h4><p>a. 各项主码分别列出：</p><ul><li><em>branch: {branch_name}</em></li><li><em>customer: {customer_name}</em></li><li><em>loan: {loan_number}</em></li><li><em>borrower: {customer_name, loan_number}</em></li><li><em>account: {account_number}</em></li><li><em>depositor: {customer_name, account_number}</em></li></ul><p>b. 对应的外码分别列出如下：</p><ul><li>loan：<em><strong>branch_name</strong></em> referencing <em><strong>branch</strong></em></li><li>borrow: <em><strong>customer_name</strong></em> referencing <em><strong>customer</strong></em></li><li>borrow: <em><strong>loan_number</strong></em> referencing <em><strong>loan</strong></em></li><li>account: <em><strong>branch_name</strong></em> referencing <em><strong>branch</strong></em> </li><li>depositor: <em><strong>customer_name</strong></em> referencing <em><strong>customer</strong></em> </li><li>depositor: <em><strong>account_number</strong></em> referencing <em><strong>account</strong></em></li></ul><h4 id="2-11"><a href="#2-11" class="headerlink" title="2.11"></a>2.11</h4><ul><li>relation schema: 一个元素为域的n元组</li><li>relation: 通常来说是一张表，是n元组的集合，对应一张数据库表中的元素</li></ul><h4 id="2-12"><a href="#2-12" class="headerlink" title="2.12"></a>2.12</h4><img src="/Users/xuxiaoyu/Library/Application Support/typora-user-images/image-20220126101613386.png" alt="image-20220126101613386" style="zoom:33%;" /><p><strong>a.</strong><br>$$<br>\Pi_{person_name} (\sigma_{company_name = \mathrm{First\ Bank\ Corporation}}(works))<br>$$<br><strong>b.</strong><br>$$<br>\Pi_{person_name, city}(\sigma_{company_name=\mathrm{First\ Bank\ Corporation}}(employee\Join account))<br>$$<br><strong>c.</strong><br>$$<br>\Pi_{customer_name} (\sigma_{balance&gt;$6000\land balance_name=\mathrm{Uptown}}(depositor\Join account))<br>$$</p><h1 id="第二次作业"><a href="#第二次作业" class="headerlink" title="第二次作业"></a>第二次作业</h1><link rel="stylesheet" href="/css/bilicard.css" type="text/css">]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;第一次作业&quot;&gt;&lt;a href=&quot;#第一次作业&quot; class=&quot;headerlink&quot; title=&quot;第一次作业&quot;&gt;&lt;/a&gt;第一次作业&lt;/h1&gt;&lt;h4 id=&quot;2-9&quot;&gt;&lt;a href=&quot;#2-9&quot; class=&quot;headerlink&quot; title=&quot;2.9&quot;&gt;&lt;/</summary>
      
    
    
    
    
    <category term="参考" scheme="http://example.com/tags/%E5%8F%82%E8%80%83/"/>
    
    <category term="Archives" scheme="http://example.com/tags/Archives/"/>
    
  </entry>
  
  <entry>
    <title>数据库系统概念学习笔记</title>
    <link href="http://example.com/2022/01/11/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://example.com/2022/01/11/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2022-01-11T14:35:32.000Z</published>
    <updated>2022-02-22T02:18:41.277Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第一章-基础引入"><a href="#第一章-基础引入" class="headerlink" title="第一章 基础引入"></a>第一章 基础引入</h1><blockquote><p>2022.2.22</p><p>数据库课堂第一节课，老师讲的是一些浮夸的东西（总之跟得分没什么关系）</p></blockquote><h3 id="一些基本概念"><a href="#一些基本概念" class="headerlink" title="一些基本概念"></a>一些基本概念</h3><ul><li>Data数据</li><li>DataBase(BD)数据库</li><li>Database Management System(DBMS)<strong>数据库管理系统</strong>『<em>课程核心</em>』</li><li>数据库管理系统的两个关键概念<ul><li><strong>interrelated data</strong></li><li><strong>Set of programs</strong> to access the data</li></ul></li></ul><h3 id="三层抽象和数据模型"><a href="#三层抽象和数据模型" class="headerlink" title="三层抽象和数据模型"></a>三层抽象和数据模型</h3><p>DBMS为用户提供数据的抽象视图，它隐藏了存储和维护的细节，简化用户系统间的交互。</p><h4 id="模式和实例"><a href="#模式和实例" class="headerlink" title="模式和实例"></a>模式和实例</h4><p><code>Schema</code>模式<br>数据库的的逻辑机构，类似于变量的类型信息</p><p><code>Instance</code>实例<br>数据库在特定时间点的实际内容，类似于变量的值</p><h4 id="数据的抽象级别"><a href="#数据的抽象级别" class="headerlink" title="数据的抽象级别"></a>数据的抽象级别</h4><ol><li>物理层：描述一条记录是如何保存在文件系统中的；</li><li>逻辑层：描述数据如何存储在数据库中，以及数据之间的关系；</li><li>视图层：应用程序隐藏了数据的具体信息，也可以处于安全目的隐藏信息；</li></ol><p>数据独立性：组件接口良好定义可以避免部分修改不相互影响</p><h4 id="其他模型"><a href="#其他模型" class="headerlink" title="其他模型"></a>其他模型</h4><ol><li>实体关系模型<ul><li>实体，现实中的各种东西</li><li>关系，各种实体之间的关系</li></ul></li><li>相关模型</li></ol><h3 id="数据库访问语言"><a href="#数据库访问语言" class="headerlink" title="数据库访问语言"></a>数据库访问语言</h3><blockquote><ul><li>数据定义语言</li><li>数据操作语言</li></ul></blockquote><h4 id="数据库定义语言-DDL"><a href="#数据库定义语言-DDL" class="headerlink" title="数据库定义语言(DDL)"></a>数据库定义语言(DDL)</h4><ul><li>用于定义数据库模式的语言</li><li>编译器生成一组储存在数据库字典中的表，字典中包含元数据</li></ul><h4 id="数据库操作语言-DML"><a href="#数据库操作语言-DML" class="headerlink" title="数据库操作语言(DML)"></a>数据库操作语言(DML)</h4><ul><li>用于访问和操作由适当的数据模型组织的数据的语言（查询语言）</li><li>特性<ul><li>程序性：用户制定需要哪些数据并如何获取</li><li>非程序性：用户制定需要哪些数据但是不指定如何获取</li></ul></li></ul><h4 id="SQL：Structured-Query-Language"><a href="#SQL：Structured-Query-Language" class="headerlink" title="SQL：Structured Query Language"></a>SQL：Structured Query Language</h4><ul><li>DDL+DML</li></ul><h3 id="用户角色和职责"><a href="#用户角色和职责" class="headerlink" title="用户角色和职责"></a>用户角色和职责</h3><blockquote><p>系统根据<strong>用户期望</strong>和<strong>用户与系统的交互方式</strong>来区别用户</p><ul><li>应用程序程序员</li><li>负责的用户</li><li>专用用户</li><li>native用户</li><li>DBA</li></ul></blockquote><h1 id="第二章-关系模型引入"><a href="#第二章-关系模型引入" class="headerlink" title="第二章 关系模型引入"></a>第二章 关系模型引入</h1><h3 id="关系数据库的结构"><a href="#关系数据库的结构" class="headerlink" title="关系数据库的结构"></a>关系数据库的结构</h3><ul><li><p>关系的每个属性都存在一个允许取值的集合，称为是该属性的域。</p><ul><li>null(空值是每一个域中都有的变量)</li><li>A <code>relation</code> $r$是几个域的笛卡尔积（一个n元组）</li></ul></li><li><p>关系架构：<br>$$<br>R(A_1, A_2, A_3,\dots, A_n) \<br>eg. \ \ \mathrm{department_schema(dept_name,building,budget)} \<br> r(R)是一个关系模型实例<br>$$</p></li><li><p>superkey（超码）</p><ul><li>是一个或多个属性的集合</li><li>超码可以让我们在有一个关系中唯一地标志一个元组。例如ID可以用于来区分这个群体中的所有个体，那么ID就是一个超码（<strong>就是为了保证数据查询的唯一性</strong>），如果单个元素不行的话，超码就会是类似于${\mathrm{name,\ teacher, \ calss \dots}}$的形式</li></ul></li><li><p>candidate key（候选码）</p><ul><li>最小超码</li><li>区分一个集合中的个体所需要的最少的元素个数</li></ul></li><li><p>Primary key（主码）</p><ul><li>数据库设计者选择的在一个关系中区分不同元组的候选码</li><li>主码的属性被叫做主属性（prime attributes）</li></ul></li><li><p>Foreign key（外码）</p><ul><li>一个关系模式$r_1$在属性中包括另外一个关系模式$r_2$的主码，那么这个属性在$r_1$中就是参照$r_2$的外码</li><li>$r_1$也叫外码依赖的参照关系，$r_2$也叫做外码的被参照关系</li></ul></li><li><p>关系数据库</p><ul><li>一组数据库模式（database schema）由一组关系模式（relation schemas）构成</li><li>一个数据库实例（database instance）由一组关系（relations）构成</li></ul></li></ul><h3 id="关系代数基础"><a href="#关系代数基础" class="headerlink" title="关系代数基础"></a>关系代数基础</h3><h4 id="关系查询语言"><a href="#关系查询语言" class="headerlink" title="关系查询语言"></a>关系查询语言</h4><ul><li>用户用来从数据库中获取信息</li><li>两种分类<ul><li>过程化语言：需要进行一系列操作计算出所需结果（Relational algebra）</li><li>非过程化语言：只需要描述所需信息，不用给出获得该信息的具体过程（Relational calculus）</li></ul></li></ul><h4 id="关系代数"><a href="#关系代数" class="headerlink" title="关系代数"></a>关系代数</h4><ul><li>6个基础运算符<ul><li>并、差、笛卡尔积、选择、投影、换名</li><li>$\cup,-,\times, \sigma_p(r), \Pi_{A_1,A_2,\dots, A_k}(r), \rho_X(E)$</li><li>自然连接natural join $\Join$</li><li>自然连接可以理解为，每一列横向对比，只有相同的头中有一样的就进行合并运算，反之不符合要求</li></ul></li></ul><h3 id="SQL引入"><a href="#SQL引入" class="headerlink" title="SQL引入"></a>SQL引入</h3><ol><li><p>数据定义语言DDL</p><ul><li><p>允许给关联给出说明信息</p><ul><li>每个关系的模式(shema)</li><li>每个属性相关的值域</li><li>完整性约束</li></ul></li><li><p><strong>关系模式</strong></p><ul><li><p>$$<br>R(A,D,\mathrm{dom},F)<br>$$</p></li><li><p>R:关系的名字</p></li><li><p>A:属性</p></li><li><p>D:域的类型</p></li><li><p>dom: A到D的匹配规则</p></li><li><p>F:给R的约束</p></li></ul></li><li><p>表结构</p><ul><li><img src="1.png" alt="image-20220121111105380" style="zoom: 25%;" /></li><li>r：关系的名字</li><li>每一个A都是关系r模式的属性值名字，每一个D都是对应属性值A的值域类型</li><li><strong>表的完整性约束内容</strong><ul><li>不能是空的</li><li>每一个都是独特的</li><li>都是主码</li></ul></li><li>删除或修改表</li></ul></li></ul></li><li><p>SQL查询的基本结构</p><ul><li><p>数据操作语言（DML）</p></li><li><p>结构</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Sclect A1, A2, ..., An</span><br><span class="line">from R1, R2, ..., Rn</span><br><span class="line">where P</span><br></pre></td></tr></table></figure><p>SQL保留字不分大小写</p></li></ul></li><li><p>几个关键的不同语法</p><ul><li><p><code>Select</code> 语法</p><ul><li>大小写不区分：Name=name=NAME</li><li>允许在关系和查询结果中出现重复，如果要删除重复，需要使用<code>distinct</code>关键词</li><li><code>selct *</code>表示筛选所有属性</li><li>select子句中可以包含算数操作</li></ul></li><li><p><code>From</code> 语法</p><ul><li>对应于关系代数中的笛卡尔积运算，</li></ul></li><li><p><code>Where</code> 语法</p><ul><li>筛选结果满足的</li><li>可以使用逻辑连接词<code>and, or, not</code></li></ul></li></ul></li><li><p>附加操作和空值</p><ul><li><p>重命名：<code>as</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">from instructor as T,instructor as S</span><br></pre></td></tr></table></figure><p><code>as</code>是可选的，并且有时可以省略 <code>instructor as T</code> $\equiv$ <code>instructor T </code></p></li><li><p>元组变量：<code>from</code>子句中使用<code>as</code>来定义</p></li><li><p>字符串操作（就是字符串匹配）</p><ul><li><code>%</code>就是匹配所有子串</li><li><code>_</code>匹配所有字符</li><li>使用<code>like</code>子句</li><li>被用来匹配的（类似正则表达式）叫做<code>Patterns</code>，是大小写敏感的</li><li><code>||</code>字符串连接</li></ul></li><li><p>对元组进行排序</p><ul><li><pre><code>order by nameorder by name descorder by name asc (default)</code></pre></li></ul></li><li><p><code>where</code>子句谓语</p><blockquote><p><strong>where</strong>  <em>salary</em> <strong>between</strong> 9000 <strong>and</strong> 10000</p></blockquote></li><li><p><em><strong>空值（null)</strong></em></p><ul><li><p>null表示<strong>未知</strong>或者<strong>不存在</strong></p></li><li><p>设计null的算数表达式结果的结果都是null</p></li><li><p>当<code>where</code>子句的谓词为<code>null</code>时可以检测空值</p></li><li><blockquote><p><strong>select</strong> <em>name</em></p><p><strong>from</strong> <em>instrucotr</em> </p><p><strong>where</strong> <em>salary</em> <strong>is</strong> <strong>null</strong></p></blockquote></li><li><p>使用<code>unknown</code>时候的逻辑</p><ul><li>OR<ul><li>unknown or true = true</li><li>unknown or false =  unknown</li><li>unknown or unknown = unknown</li></ul></li><li>AND<ul><li> true and unknown  = unknown </li><li>flase and unknown = false</li><li>unknown and unknown = unknown</li></ul></li><li>NOT<ul><li>not known = unknown</li></ul></li></ul></li></ul></li><li><p>集合操作</p></li><li><p>聚合操作</p><ul><li><code>avg, min,max, sum, count</code></li></ul></li></ul></li><li><p>嵌套子查询</p><ol><li>where中可以用于测试<ol><li>集合中的父子关系</li><li>集合比较<ul><li><code>some</code>子句：表示只要和集合中的一个满足条件即为true</li><li><code>all</code>对每一个都进行测试，逐一进行，<code>not all = not in </code>，反之不对</li><li><code>exist</code>子句，<code>exist A ==  A != false</code></li></ul></li><li>集合基数（势）</li></ol></li><li></li></ol></li></ol><link rel="stylesheet" href="/css/bilicard.css" type="text/css">]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;第一章-基础引入&quot;&gt;&lt;a href=&quot;#第一章-基础引入&quot; class=&quot;headerlink&quot; title=&quot;第一章 基础引入&quot;&gt;&lt;/a&gt;第一章 基础引入&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;2022.2.22&lt;/p&gt;
&lt;p&gt;数据库课堂第一节课，老师讲的是一</summary>
      
    
    
    
    
    <category term="Archives" scheme="http://example.com/tags/Archives/"/>
    
    <category term="1" scheme="http://example.com/tags/1/"/>
    
    <category term="2" scheme="http://example.com/tags/2/"/>
    
  </entry>
  
</feed>
